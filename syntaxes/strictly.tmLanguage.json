{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "strictly",
	"patterns": [
		{
			"include": "#data"
		},
		{
			"include": "#elements"
		},
		{
			"include": "#assignment"
		},
		{
			"include": "#statement"
		},
		{
			"include": "#expression"
		},
		{
			"include": "#invalid"
		}
	],
	"repository": {
		"data": {
			"patterns": [
				{
					"begin": "(data)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control"
						}
					},
					"patterns": [
						{
							"match": "(\\p{Uppercase_Letter}(\\p{Letter})*)",
							"name": "entity.name.type"
						},
						{
							"begin": "=",
							"patterns": [
								{
									"match": "\\|"
								},
								{
									"include": "#algebraic-datatype-with-parameter"
								},
								{
									"include": "#algebraic-datatype-without-parameter"
								},
								{
									"include": "#invalid"
								}
							],
							"end": ";"
						}
					],
					"end": "$"
				}
			],
			"repository": {
				"algebraic-datatype-with-parameter": {
					"begin": "(\\p{Uppercase_Letter}(\\p{Letter})*)\\(",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					},
					"patterns": [
						{
							"match": ","
						},
						{
							"include": "#algebraic-datatype-with-parameter"
						},
						{
							"include": "#algebraic-datatype-without-parameter"
						},
						{
							"include": "#invalid"
						}
					],
					"end": "\\)"
				},
				"algebraic-datatype-without-parameter": {
					"match": "(\\p{Uppercase_Letter}(\\p{Letter})*)",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					}
				}
			}
		},
		"elements": {
			"patterns": [
				{
					"include": "#component"
				},
				{
					"include": "#host"
				}
			],
			"repository": {
				"host": {
					"name": "entity.name.tag",
					"match": "\\$((\\p{Ll})+:)?(\\p{Ll})+($|(?={))"
				},
				"component": {
					"name": "entity.name.type",
					"match": "\\$(\\p{Ll}|\\.)+(\\p{Pd}(\\p{Ll})+)+($|(?={))"
				}
			}
		},
		"lefthandside": {
			"patterns": [
				{
					"include": "#hole"
				},
				{
					"include": "#algebraic-datatype-with-parameter"
				},
				{
					"include": "#algebraic-datatype-without-parameter"
				},
				{
					"include": "#record"
				},
				{
					"include": "#variable"
				},
				{
					"include": "#list"
				},
				{
					"include": "#invalid"
				}
			],
			"repository": {
				"hole": {
					"match": "_",
					"name": "comment"
				},
				"algebraic-datatype-with-parameter": {
					"begin": "(\\p{Uppercase_Letter}(\\p{Letter})*)\\(",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					},
					"patterns": [
						{
							"include": "#lefthandside"
						}
					],
					"end": "\\)"
				},
				"algebraic-datatype-without-parameter": {
					"match": "(\\p{Uppercase_Letter}(\\p{Letter})*)",
					"name": "entity.name.type"
				},
				"record": {
					"begin": "\\{",
					"patterns": [
						{
							"match": ","
						},
						{
							"include": "#lefthandside"
						}
					],
					"end": "\\}"
				},
				"variable": {
					"match": "(\\p{Lowercase_Letter}(\\p{Letter})*'*)@?",
					"captures": {
						"1": {
							"name": "variable"
						}
					}
				},
				"list": {
					"begin": "\\[",
					"patterns": [
						{
							"match": ","
						},
						{
							"match": "\\|"
						},
						{
							"include": "#lefthandside"
						}
					],
					"end": "\\]"
				}
			}
		},
		"assignment": {
			"match": "(\\p{Lowercase_Letter}(\\p{Letter})*)\\s*=(?!=)",
			"captures": {
				"1": {
					"name": "variable"
				}
			}
		},
		"statement": {
			"patterns": [
				{
					"include": "#variable-declaration"
				},
				{
					"include": "#stream"
				},
				{
					"match": ";"
				}
			],
			"repository": {
				"variable-declaration": {
					"begin": "(let)\\s+",
					"captures": {
						"1:": {
							"name": "storage.type"
						}
					},
					"patterns": [
						{
							"include": "#lefthandside"
						}
					],
					"end": "=|$"
				},
				"stream": {
					"begin": "(\\\\)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"match": ","
						},
						{
							"include": "#lefthandside"
						}
					],
					"end": "(\\<-)|$",
					"endCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				}
			}
		},
		"expression": {
			"patterns": [
				{
					"include": "#control-flow"
				},
				{
					"include": "#function-definition"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#record"
				},
				{
					"include": "#list"
				},
				{
					"include": "#algebraic-datatype-with-parameter"
				},
				{
					"include": "#algebraic-datatype-without-parameter"
				},
				{
					"include": "#string"
				},
				{
					"include": "#variable"
				},
				{
					"include": "#number"
				},
				{
					"include": "#number"
				}
			],
			"repository": {
				"control-flow": {
					"match": "if|then|else|match|case|each",
					"name": "keyword.control"
				},
				"function-definition": {
					"begin": "(/)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"match": ","
						},
						{
							"include": "#lefthandside"
						}
					],
					"end": "(->)|$",
					"endCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				},
				"function-call": {
					"comment": "functioncall can start with a variable",
					"begin": "(((\\p{Lowercase_Letter}(\\p{Letter})*)'*\\.)*)(\\p{Lowercase_Letter}(\\p{Letter})*)\\(",
					"beginCaptures": {
						"1": {
							"name": "variable"
						},
						"5": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					],
					"end": "\\)"
				},
				"record": {
					"begin": "{",
					"patterns": [
						{
							"match": "\\|"
						},
						{
							"match": ","
						},
						{
							"include": "#assignment"
						},
						{
							"include": "#statement"
						},
						{
							"include": "#expression"
						},
						{
							"include": "#invalid"
						}
					],
					"end": "}"
				},
				"list": {
					"begin": "\\[",
					"patterns": [
						{
							"match": ","
						},
						{
							"match": "\\|"
						},
						{
							"include": "#statement"
						},
						{
							"include": "#expression"
						},
						{
							"include": "#invalid"
						}
					],
					"end": "\\]"
				},
				"algebraic-datatype-with-parameter": {
					"begin": "(\\p{Uppercase_Letter}(\\p{Letter})*)\\(",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					},
					"patterns": [
						{
							"match": ","
						},
						{
							"include": "#expression"
						},
						{
							"include": "#invalid"
						}
					],
					"end": "\\)"
				},
				"algebraic-datatype-without-parameter": {
					"match": "(\\p{Uppercase_Letter}(\\p{Letter})*)",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					}
				},
				"string": {
					"begin": "(\")",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.double"
						}
					},
					"end": "(\")",
					"endCaptures": {
						"1": {
							"name": "string.quoted.double"
						}
					},
					"patterns": [
						{
							"begin": "(\\$\\{)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.definition.template-expression.begin"
								}
							},
							"end": "(\\})",
							"endCaptures": {
								"1": {
									"name": "punctuation.definition.template-expression.end"
								}
							},
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						{
							"name": "string.quoted.double",
							"match": "."
						}
					]
				},
				"variable": {
					"comment": "variables start with a lowercase character and can have any amount of characters afterwards, it can have any amount of dots for nested variables",
					"match": "(\\p{Lowercase_Letter}(\\p{Letter})*'*)(\\.\\p{Lowercase_Letter}(\\p{Letter})*'*)*",
					"name": "variable"
				},
				"number": {
					"match": "(\\d)+(.(\\d)+)?",
					"name": "constant.numeric"
				},
				"operator": {
					"match": "==|++"
				}
			}
		},
		"invalid": {
			"match": "(.)",
			"name": "invalid.illegal"
		}
	},
	"scopeName": "source.strictly"
}