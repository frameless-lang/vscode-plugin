{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "strictly",
	"patterns": [
		{
			"include": "#view"
		},
		{
			"include": "#model"
		},
		{
			"include": "#style"
		},
		{
			"include": "#invalid"
		}
	],
	"repository": {
		"view": {
			"begin": "^(view)$",
			"beginCaptures": {
				"1": {
					"name": "string.regexp"
				}
			},
			"patterns": [
				{
					"include": "#view-content"
				}
			],
			"end": "(?=^\\p{L})"
		},
		"view-content": {
			"patterns": [
				{
					"include": "#view-helper"
				},
				{
					"include": "#view-hostelement"
				},
				{
					"include": "#view-component"
				},
				{
					"include": "#options"
				},
				{
					"include": "#view-string"
				},
				{
					"include": "#invalid"
				}
			],
			"repository": {
				"view-helper": {
					"match": "^(\t)+(#)((.)*)",
					"captures": {
						"2": {
							"name": "keyword.control"
						},
						"3": {
							"patterns": [
								{
									"match": "(if|match)\\s((.)*)",
									"captures": {
										"1": {
											"name": "keyword.control"
										},
										"2": {
											"patterns": [
												{
													"include": "#righthandside"
												}
											]
										}
									}
								},
								{
									"match": "(case)\\s((.)*)",
									"captures": {
										"1": {
											"name": "keyword.control"
										},
										"2": {
											"patterns": [
												{
													"include": "#lefthandside"
												}
											]
										}
									}
								},
								{
									"match": "(else)(\\s((.)*))?",
									"captures": {
										"1": {
											"name": "keyword.control"
										},
										"3": {
											"patterns": [
												{
													"include": "#invalid"
												}
											]
										}
									}
								},
								{
									"match": "(model|each)\\s+(((.)*))",
									"captures": {
										"1": {
											"name": "keyword.control"
										},
										"3": {
											"patterns": [
												{
													"include": "#feedfromRightHandSide"
												}
											]
										}
									}
								},
								{
									"match": "(context)\\s+(((.)*))",
									"captures": {
										"1": {
											"name": "keyword.control"
										},
										"3": {
											"patterns": [
												{
													"include": "#feedfromHost"
												}
											]
										}
									}
								},
								{
									"include": "#invalid"
								}
							]
						}
					}
				},
				"view-hostelement": {
					"name": "entity.name.tag",
					"match": "^(\t)+((\\p{Ll})+:)?(\\p{Ll})+($|(?={))"
				},
				"view-component": {
					"name": "entity.name.type",
					"match": "^(\t)+(\\p{Ll}|\\.)+(\\p{Pd}(\\p{Ll})+)+($|(?={))"
				},
				"view-string": {
					"match": "^(\t)+(?=\")((.)*)",
					"captures": {
						"2": {
							"patterns": [
								{
									"include": "#string"
								}
							]
						}
					}
				}
			}
		},
		"options": {
			"begin": "{\\s*",
			"end": "(\t)*}",
			"patterns": [
				{
					"match": "(\t)*((.)+)",
					"captures": {
						"2": {
							"patterns": [
								{
									"match": "((\\p{L})+\\*?)\\s*=\\s*((.)+)$",
									"captures": {
										"1": {
											"name": "entity.other.attribute-name"
										},
										"3": {
											"patterns": [
												{
													"include": "#righthandside"
												}
											]
										}
									}
								},
								{
									"include": "#invalid"
								}
							]
						}
					}
				}
			]
		},
		"feedfromRightHandSide": {
			"match": "\\\\((.)*)(<-)\\s*((.)*)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#lefthandside"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#righthandside"
						}
					]
				}
			}
		},
		"feedfromHost": {
			"match": "\\\\((.)*)(<-)\\s*((.)*)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#lefthandside"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"name": "entity.name.tag",
							"match": "((\\p{Ll})+:)?(\\p{Ll})+($|(?={))"
						},
						{
							"name": "entity.name.type",
							"match": "(\\p{Ll}|\\.)+(\\p{Pd}(\\p{Ll})+)+($|(?={))"
						},
						{
							"include": "#invalid"
						}
					]
				}
			}
		},
		"style": {
			"begin": "^(style)$",
			"beginCaptures": {
				"1": {
					"name": "string.regexp"
				}
			},
			"patterns": [
				{
					"include": "#invalid"
				}
			],
			"end": "^(?=\\p{L})"
		},
		"model": {
			"begin": "^(model):((\\p{L})+)",
			"beginCaptures": {
				"1": {
					"name": "string.regexp"
				},
				"2": {
					"name": "entity.name.function"
				}
			},
			"patterns": [
				{
					"include": "#options"
				}
			],
			"end": "(?=^\\p{L})"
		},
		"righthandside": {
			"patterns": [
				{
					"include": "#righthandside-functiondefinition"
				},
				{
					"include": "#righthandside-functioncall"
				},
				{
					"include": "#righthandside-variable"
				},
				{
					"include": "#righthandside-agbwithparameters"
				},
				{
					"include": "#righthandside-agb"
				},
				{
					"include": "#righthandside-number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#righthandside-operator"
				},
				{
					"include": "#invalid"
				}
			],
			"repository": {
				"righthandside-operator": {
					"match": "(\\+|-|\\\\|\\*)",
					"name": "keyword.operator"
				},
				"righthandside-functiondefinition": {
					"comment": "functionDefinition",
					"begin": "(/)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"match": ","
						},
						{
							"include": "#lefthandside"
						}
					],
					"end": "(->)|$",
					"endCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					}
				},
				"righthandside-agbwithparameters": {
					"begin": "(\\p{Uppercase_Letter}(\\p{Letter})*)\\(",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					},
					"patterns": [
						{
							"include": "#righthandside"
						}
					],
					"end": "\\)"
				},
				"righthandside-agb": {
					"match": "(\\p{Uppercase_Letter}(\\p{Letter})*)",
					"name": "entity.name.type"
				},
				"righthandside-functioncall": {
					"comment": "functioncall can start with a variable",
					"begin": "(((\\p{Lowercase_Letter}(\\p{Letter})*)\\.)*)(\\p{Lowercase_Letter}(\\p{Letter})*)\\(",
					"beginCaptures": {
						"1": {
							"name": "variable"
						},
						"5": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"include": "#righthandside"
						}
					],
					"end": "\\)"
				},
				"righthandside-variable": {
					"comment": "variables start with a lowercase character and can have any amount of characters afterwards, it can have any amount of dots for nested variables",
					"match": "(\\p{Lowercase_Letter}(\\p{Letter})*)(\\.\\p{Lowercase_Letter}(\\p{Letter})*)*",
					"name": "variable"
				},
				"righthandside-number": {
					"match": "(\\d)+(.(\\d)+)?",
					"name": "constant.numeric"
				}
			}
		},
		"lefthandside": {
			"patterns": [
				{
					"include": "#lefthandside-hole"
				},
				{
					"include": "#lefthandside-agbwithparameters"
				},
				{
					"include": "#lefthandside-agb"
				},
				{
					"include": "#lefthandside-variable"
				},
				{
					"include": "#lefthandside-tuple"
				},
				{
					"include": "#invalid"
				}
			],
			"repository": {
				"lefthandside-hole": {
					"match": "_",
					"name": "comment"
				},
				"lefthandside-agbwithparameters": {
					"begin": "(\\p{Uppercase_Letter}(\\p{Letter})*)\\(",
					"captures": {
						"1": {
							"name": "entity.name.type"
						}
					},
					"patterns": [
						{
							"include": "#lefthandside"
						}
					],
					"end": "\\)"
				},
				"lefthandside-agb": {
					"match": "(\\p{Uppercase_Letter}(\\p{Letter})*)",
					"name": "entity.name.type"
				},
				"lefthandside-variable": {
					"match": "(\\p{Lowercase_Letter}(\\p{Letter})*)@?",
					"captures": {
						"1": {
							"name": "variable"
						}
					}
				},
				"lefthandside-tuple": {
					"begin": "\\(",
					"patterns": [
						{
							"match": ","
						},
						{
							"include": "#lefthandside"
						}
					],
					"end": "\\)"
				}
			}
		},
		"string": {
			"begin": "(\")",
			"beginCaptures": {
				"1": {
					"name": "string.quoted.double"
				}
			},
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "string.quoted.double"
				}
			},
			"patterns": [
				{
					"begin": "(\\$\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.template-expression.begin"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.template-expression.end"
						}
					},
					"patterns": [
						{
							"include": "#righthandside"
						}
					]
				},
				{
					"name": "string.quoted.double",
					"match": "."
				}
			]
		},
		"invalid": {
			"match": "(.)",
			"name": "invalid.illegal"
		}
	},
	"scopeName": "source.strictly"
}